def longest_palindromic_substring_length(s):
    # Step 1: Transform string
    t = '#' + '#'.join(s) + '#'
    n = len(t)
    p = [0] * n
    center = right = 0
    max_len = 0

    # Step 2: Manacher's algorithm
    for i in range(n):
        mirror = 2 * center - i
        if i < right:
            p[i] = min(right - i, p[mirror])
        
        # Try to expand the palindrome centered at i
        a, b = i + p[i] + 1, i - p[i] - 1
        while a < n and b >= 0 and t[a] == t[b]:
            p[i] += 1
            a += 1
            b -= 1

        # Update center and right boundary
        if i + p[i] > right:
            center, right = i, i + p[i]

        max_len = max(max_len, p[i])

    return max_len

# Input reading and function call
n = int(input())
s = input().strip()
print(longest_palindromic_substring_length(s))
